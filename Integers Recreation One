#1, 246, 2, 123, 3, 82, 6, 41 are the divisors of number 246. Squaring these divisors we get: 1, 60516, 4, 15129, 9, 6724, 36, 1681. The sum of these squares is 84100 which is 290 * 290.

#Task
#Find all integers between m and n (m and n integers with 1 <= m <= n) such that the sum of their squared divisors is itself a square.

#We will return an array of subarrays or of tuples (in C an array of Pair) or a string. The subarrays (or tuples or Pairs) will have two elements: first the number the squared divisors of which is a square and then the sum of the squared divisors.

import math
def list_squared(m, n):
    new = []
    for el in range(m, n):
        if el == 1:
            a = [1, 1]
            new.append(a)
            continue
        sum = 0
        for i in range(1, math.ceil(math.sqrt(el))):
            if el % i == 0:
                sum += (el / i)**2 + i**2
        if int(math.sqrt(sum)) == float(math.sqrt(sum)):
            temp = [el, int(sum)]
            new.append(temp)
    return(new)